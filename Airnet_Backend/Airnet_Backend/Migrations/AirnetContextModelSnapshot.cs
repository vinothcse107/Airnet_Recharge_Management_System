// <auto-generated />
using System;
using Airnet_Backend.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Airnet_Backend.Migrations
{
    [DbContext(typeof(AirnetContext))]
    partial class AirnetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Airnet_Backend.Model.Plan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanOffers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanValidity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Airnet_Backend.Model.Recharge", b =>
                {
                    b.Property<Guid>("RechargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RechargeId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserName");

                    b.ToTable("Recharges");
                });

            modelBuilder.Entity("Airnet_Backend.Model.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("PlanId");

                    b.HasIndex("Username");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Airnet_Backend.Model.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MobileNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Airnet_Backend.Model.Recharge", b =>
                {
                    b.HasOne("Airnet_Backend.Model.Plan", "Plans")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airnet_Backend.Model.User", "User")
                        .WithMany("Recharges")
                        .HasForeignKey("UserName");

                    b.Navigation("Plans");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airnet_Backend.Model.Review", b =>
                {
                    b.HasOne("Airnet_Backend.Model.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airnet_Backend.Model.Recharge", "RechargeReviewId")
                        .WithOne("Review")
                        .HasForeignKey("Airnet_Backend.Model.Review", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airnet_Backend.Model.User", "User")
                        .WithMany("Review")
                        .HasForeignKey("Username");

                    b.Navigation("Plan");

                    b.Navigation("RechargeReviewId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airnet_Backend.Model.Recharge", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("Airnet_Backend.Model.User", b =>
                {
                    b.Navigation("Recharges");

                    b.Navigation("Review");
                });
#pragma warning restore 612, 618
        }
    }
}
